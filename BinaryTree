#include <stdio.h>
#include <stdlib.h>
#define ElementType int;
#define MAXSIZE 100;
typedef struct TreeNode *BinTree;
struct TreeNode
{
    ElementType Data;
    BinTree Left;
    BinTree right;
};
//find by recursion
Position Find(ElementType X,BinTree BST)
{
    BinTee T=BST;
    if(!T)
        return NULL;
    if(X<T->Data)
        return Find(X,T->Left);
    else if(X>T->Data)
        return Find(X,T->Right);
    else
        return T;

}
//find non-recursion
Position Find(ElementType X,BinTree BST)
{
    BinTee T=BST;
    while(!T)
    {
        if(!T)
            return NULL;
        if(X<T->Data)
            T=T->Left;
        else if(X>T->Data)
            T=T->Right;
        else
            return T;
    }
    return NULL;
}
Position FindMax(BinTree BST)
{
    if(BST)
    {
        while(BST->left)
            BST=BST->left;
        return BST;
    }
    else
        return NULL;

}
Position FindMin(BinTree BST)
{
    if(BST)
    {
        while(BST->left)
            BST=BST->left;
        return BST;
    }
    else
        return NULL;

}
BinTree Insert(ElementType X,BinTree BST)
{
    if(!BST)
    {
        BST=malloc(sizeof(struct TreeNode));
        BST->Left=BST->Right=NULL;
        BST->Data=X;
    }
    else
    {
        if(X<BST->Data)
            BST->Left=Insert(X,BST->Left);
        else if(X>BST->Right)
            BST->Right=Insert(X,BST->Right);
    }
    return BST;
}
BinTree Delete(ElementType X,BinTree BST)
{
    BinTree DelT;
    if(!BST) printf("not find...");
    else if(X<BST->Left)
        BST->Left=Delete(X,BST->Left);
    else if(X>BST->Right)
        BST->Right=Delete(X,BST->Right);
    else
    {
        if(BST->Left&&BST->Right)
        {
            DelT=FinMin(BST->Right);
            BST->Data=DelT->Data;
            BST->Right=Delete(BST->Data,BST->Right);
        }
        else
        {
            DelT=BST;
            if(!BST->Left)
            {
                BST=BST->Right//BST->Data=X;
            }
            else if(!BST->Right)
            {
                BST=BST->Left;
            }
            free(BST);
        }

    }
    return BST;

}
