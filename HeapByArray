#include <stdio.h>
#include <stdlib.h>
#define ElementType int;
#define MAXSIZE 100;
typedef struct HeapStruct *MaxHeap;
struct HeapStruct
{
    ElementType *Elements;
    int Size;
    int Capacity;
};
//find by recursion
MaxHeap Create(int MAXSIZE)
{
    MaxHeap H=malloc(sizeof(struct HeapStruct));
    H->Elements=malloc((MAXSIZE+1)*sizeof(ElementType));
    H->Size=0;
    H->Capacity=MAXSIZE;
    H->Elements[0]=MaxData;//set guard
    return H;
}
Boolean IsFull(MaxHeap H)
void Insert(MaxHeap H,ElementType item)
{
    int i;
    if(IsFull(H))
    {
        printf("Maxheap is full...");
        return;
    }
    i=++H->Size;
    for(;H->Elements[i/2]<item;i/=2)
    {
        H->Elements[i]=H->Elements[i/2]
    }
    H->Elements[i]=item;
}
Bolean IsEmpty(MaxHeap H)
ElementType DeleteMax(MaxHeap H)
{
    int Parent,Child;
    ElementType MaxItem,temp;
    if(IsEmpty(H))
    {
        printf("Heap is empty...");
        return;
    }
    MaxItem=H->Elements[1];
    temp=Elements[H->Size--];
    for(Parent=1;Parent*2<=H->Size;Parent=Child)
    {
        Child=Parent*2;
        if(Child!=H->Size&&(H->Elements[Child]<H->Elemnts[Child+1]))
            Child++;
        if(temp>=H->Elements[Child]) break;
        else
            H->Elements[Parent]=H->Elements[Child]
    }
    H->Elements[Parent]=temp;
    return  MaxItem;
}
